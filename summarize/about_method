
* Array.new
---説明----------------------------------------------------------------------------------------------------------
Array.new(size = 0, val = nil)
長さ size の配列を生成し、各要素を val で初期化して返します。
Ruby では arr = Array.new(n) と書くことで長さ n の配列 arr を用意することができます。
---コード例----------------------------------------------------------------------------------------------------------
ary = Array.new(3, "foo")
p ary                     #=> ["foo", "foo", "foo"]

* splitメソッドとは
---説明----------------------------------------------------------------------------------------------------------
"文字列".split(区切り文字, 分割数)
文字列を指定した引数e.g.)カンマ(,)で分割し、その分割した文字列を要素とした配列で取得する事が出来ます。
---コード例----------------------------------------------------------------------------------------------------------
"Apple,Orange,Cherry,Banana".split(',')
=> ["Apple", "Orange", "Cherry", "Banana"]
"Tokyo:Saitama:Okinawa".split(':', 2)
=> ["Tokyo", "Saitama:Okinawa"] # 2分割に制限され要素は2つになる

* .maxメソッド
---説明----------------------------------------------------------------------------------------------------------
配列の中の最大値を持つ要素を取得することができるメソッドです。
空の配列の場合はnilを返します。
また最大値だけでなく、値の大きいもの順にいくつ取得するか引数で指定することもできます。
その場合、返却値は配列となります。
---コード例----------------------------------------------------------------------------------------------------------
[5, 6, 2, 9, 8, 3].max
=> 9
[5, 6, 2, 9, 8, 3].max(3)
=> [9, 8, 6]

* mapメソッド
---説明----------------------------------------------------------------------------------------------------------
map は、配列の要素の数だけブロック内の処理を繰り返し、結果として作成された配列を返します。
map は元の値に対して影響を与えないのに対し、 map! は元の値を書き換えます。
mapメソッドは、このモジュールを組み込んだハッシュや配列に対して使用することができます。
---コード例----------------------------------------------------------------------------------------------------------
# すべて 3 倍にした配列を返す
p (1..3).map {|n| n * 3 }  # => [3, 6, 9]
---省略版説明----------------------------------------------------------------------------------------------------------
各要素にメソッドを適用するときは以下のように省略して記述することができます。
オブジェクト.map(&:メソッド名)
---コード例----------------------------------------------------------------------------------------------------------
a = ["APPLE", "ORANGE", "GRAPE"]
p a.map(&:downcase) # ["apple", "orange", "grape"]


* timesメソッド
---説明----------------------------------------------------------------------------------------------------------
数値オブジェクト.times do |変数|
# 繰り返す処理
end
# 処理が1行で収まる場合は、以下でもよい
数値オブジェクト.times { |変数|  処理 }
ブロックパラメータには、「0」から「指定した整数-1」までの値が順番に渡されます。
例えば、次のコードのように5を指定した場合は0から4までの値が順番にブロックパラメータ(i)へ渡されます。
5.times { |i| puts  i }

* getsメソッド
---説明----------------------------------------------------------------------------------------------------------
getsメソッドは、ユーザーがキーボードで入力した値を文字列として取得するメソッドです。
注意:getsメソッド で受け取ったユーザー入力値の文字列の末尾には、改行コードが入ります。
改行文字を取り除くために String クラスの chomp メソッドを gets.chompを使います。
chomp メソッドは文字列末尾にある改行文字を削除した新しい文字列を返します。

* include?メソッド
---説明----------------------------------------------------------------------------------------------------------
include? メソッドは 文字列.include? 探したい文字列 のように使うと
探したい文字列が文字列の部分文字列であるかを true, false で返します。
---コード例----------------------------------------------------------------------------------------------------------
a = gets.chomp
s = gets
if s.include? a #sの中にaが含めれているかをtrue,falseで返す。
    puts 'YES'
else
    puts 'NO'
end










