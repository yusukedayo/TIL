### 今日の積み上げ
* 現場railsのchapter3,4
* praciceのrailsにおけるリクエスとレスポンス修正

### 明日やること
* praciceのrailsにおけるリクエスとレスポンス修正 続き
* じゃんけんプログラムの修正
* practice curl
* 現場rails chapter 5


###### 現場rails chapter3
・railsではコントローラーやビューからモデルを使うプログラムを書くため
環境構築の後は機能に関するモデルを用意するのが一般的。
・railsのモデルは１モデルに対応するrubyのクラス 2,モデルに対応するデータベースのテーブルの２つの要素からなる。
モデルに対応するデータベースはクラス名を複数形にしたものを使用する。（クラス名はキャメル,テーブルはスネークで命名）
・Resourcesはindex,show,new,create,edit,update,destroyに関するルーティングを一括して行ってくれる。
・アプリの玄関口のルーツパスの画面を設定するときは
Root to : ‘tasks#index’で設定できる。

・Link_to メソッドはHTMLを出力するためのメソッドである。

・new_task_pathはURL作成のためのヘルパーメソッド。これを呼び出すことで/tasks/newという文字列が得られる。このURLヘルパーメソッドはroutes.rbの定義によって自動生成される。

・コントローラーのアクションはアクションからビューに受け渡したいデータをインスタンス変数に入れることが基本的な役割。
教材の例だと taskscontorollerのnew actionで@task = Task.newを定義して、そのインスタンス変数を用いて
Form_with model: @task, local:ture do |f|
の形でモデルに関連させた入力フォームを作成した。

・form_withヘルパー内でf.submitでsubmitヘルパーを呼び出すことができる。
１つ目の引数でボタンに表示される用語を指定することが可能。
https://qiita.com/mmyk596/items/a0549b1ff210e9334572

・paramsもメソッドの１つ。フォームから送信された情報を捌く役割を持っている。
https://pikawaka.com/rails/params


###### FizzBuzzアプリの修正#2
確認用に記入したp numberを消し忘れたことが要件とは違う出力結果に繋がってしまった。
確認後にちゃんと消さないといけないことに加えて要件と自分の出力結果のどこが違うのかを
判断する力を養っていかないといけないと感じた。

###### コントローラー名とモデル名を統一しなかったときに起きたエラーについて書いてくれてる。
https://teratail.com/questions/166206


###### windowsでのデータベース削除方法
https://qiita.com/GalaxyNeko/items/dd0ef47a2475ccde750d


ERBの書き方について<% %>と<%= %>の違いがわからなかったので
https://www.javadrive.jp/rails/template/index5.html
https://shinkufencer.hateblo.jp/entry/2018/12/27/000000



###### 勉強方法について

・現状の課題
知識として身についていないように感じる。例えばpracticeは進めることができるがそれが終われば内容を忘れてしまう。
原因は「復習ができていないこと」「アウトプットの数が少ないこと」の２点かなと感じている。
対策
「復習ができていないこと」
・単元ごとに学んだことはブログとしてまとめる。（できるだけ図を使ってわかりやすくなるように）
・作成したブログを毎日振り返る時間を作る（寝る前と朝起きた時が効果的）
・指摘頂いた課題はその日の内に何かしら返信する。

「アウトプットの数が少ないこと」
・atcoder  最低でも１日１問解いて問題と解説をまとめるようにする。
・rubyの問題 この問題を一日１問解くようにする。 https://blog.jnito.com/entry/2019/05/03/121235
・サル先生のgitで手を動かしながら覚える         https://backlog.com/ja/git-tutorial/intro/01/


