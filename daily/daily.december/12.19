#### 今週の目標
* 勉強時間 24時間以上。

##### 今日のやること
・QAアプリ回答例との比較 (１時間)
・インスタクローンログイン機能（３時間）
・インスタ投稿CRUD (２時間)

##### 今日学んだこと
## sorceryを使ってのlogin・logout機能の実装

・参考記事
https://qiita.com/tanutanu/items/52ceab22ad21ba97c902

・テーブル設計
要件
    ログインログアウト機能がある
    ユーザーはニックネームとアバター画像を登録できる
Usersテーブル
    username:string:null false
    email:string:null false

・コントローラー設計
ユーザー登録画面を表示  get     /users/new  user#new
ユーザー登録をする      post    /users      users#create
ログイン画面を表示する  get     /login      sessions#new
ログインする            post    /login      sessions#create
ログアウトする          delete  /login      sessions#destroy

・なぜdeviceではなくsorceryなのか？
deviceのメリットはボタン一つでviewまで作成してくれること。一方sorceryのメリットはシンプルだからカスタムしやすいところ。
一度deviceを使用したことがあるが一気に色んなものが作成されるため手に負えないように感じた。自分にわかる範囲のことを実装するためにはsorceryが向いていると判断した。

### 開発手順
1, gemのインストール
gemfileにsorceryを追加してbundle installを行った。
以下のメッセージが表示されたがoauthの必要性に関してはいまいちわからなかったので先に進める。
As of version 1.0 oauth/oauth2 wont be automatically bundled so you may need to add those dependencies to your Gemfile.
You may need oauth2 if you use external providers such as any of these: https://github.com/Sorcery/sorcery/tree/master/lib/sorcery/providers

2, bundle exec rails generate sorcery:installで以下のmigrationファイルを作成。
db\migrate\20211219030514_sorcery_core.rb
def change
  create_table :users do |t|
    t.string :email,            null: false, index: { unique: true }
    t.string :crypted_password
    t.string :salt
    t.timestamps                null: false
  end
end

3, ユーザー名を追加してbundle db:migrateでテーブル作成。
create_table "users", options: "ENGINE=InnoDB DEFAULT CHARSET=utf8", force: :cascade do |t|
    t.string "email", null: false
    t.string "crypted_password"
    t.string "salt"
    t.string "username", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["email"], name: "index_users_on_email", unique: true
  end

4, bundle exec rails g controller Users new createで新規登録のためのコントローラーを作成する。
コントローラーを作成後、正常に動くかをチェックする。