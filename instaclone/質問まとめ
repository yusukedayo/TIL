・serialize :images, JSON
serializeってなんだ, なんでJSONを指定しないといけないんだ。



・node_modulesファイルの役割ってなんだ


・なんでswipreはデフォルトじゃなくてjquery方式じゃないと実装できないのか？



・外部キー制約付けるならhas_manyとかのアソシエーションって必要なの？


・.order(created_at: :desc)って何してるっけ

・２つの違いがわからん
:destroy: オブジェクトが削除されるときに、関連付けられたオブジェクトのdestroyメソッドが実行されます。
:delete: オブジェクトが削除されるときに、関連付けられたオブジェクトが直接データベースから削除されます。destroyメソッドは実行されません。

・コメントcontrollerはsaveとupdateの失敗パターン考慮しなくていいの？

・ログインしてないと使えません的なメッセージ欲しいな

・コメントでは改行できないのなんでだ。simple_formatの問題？



・def updateの書き方について
ログインユーザの情報を変更するときは current_user みたいな変数を変更するんじゃなくて、DBを引き直して更新しましょうって話。
https://diary.shu-cream.net/(Rails%E3%81%A7)%E3%83%97%E3%83%AD%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E6%9B%B4%E6%96%B0%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%84%E3%81%A4%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9
参考記事を読みましたがよくわからなかったので実際に検証してみました！

検証内容
ログイン中のユーザー名の表示がビューでどのように変換するか

検証の為追加したコード↓
ログイン中ユーザー名を表示するためにビューにのヘッダー部分に<%= current_user.name if current_user %>を記述
モデルにユーザ名のvalidationとしてlength: { maximum: 10 }を記述
検証方法
ユーザー情報更新時にあえてユーザ名を11文字以上にして更新してみる
結果
@user = current_userの場合
ユーザ名の更新に失敗しているにも関わらず、ヘッダー部分に11文字以上のユーザ名（あえて失敗するために入力したユーザ名）が表示される
画面をリロードするとヘッダー部分は以前のユーザ名に戻る
@user = User.find(current_user.id)の場合
ユーザ名の更新に失敗し、なおかつ以前のユーザ名がヘッダー部分に表示されている

・$はDOM構造を読み終わってから発火するという意味を持つ。
jsのコードについてなのですが、$がそれぞれのコードの始まりに書かれていたのですがこのドルマークの意味は
以下の認識で合ってますか？
> $とは『$=jQuery』でありjQueryと関係がある変数や関数であると示しているが、JavaScriptから見るとjQueryがただ$マークを特別な文字として扱っているだけで、JavaScript上でじゃただの文字
https://qumeru.com/magazine/364
* create.js.slim
```ruby
| $('#like_area-#{@post.id}').html("#{j render('posts/unlike', post: @post)}")
  # このコードで_like_area.html.slimの'#like_area-#{@post.id}'が.html("#{j render('posts/unlike', post: @post)}")に置き換わる。
  # いいねをしたら_unlike.html.slimが表示されハートに色が付いた状態になる。
```

・非同期でのいいね削除がうまく行えない
実装を進める中でいいねを削除しても画面が切り替わらないエラーに遭遇しました。
特にエラーコードなどが出なかったので該当コードを確認すると以下のようになっていました。
```slim
| $('#like_area-#{@post.id}').html("#{j render('posts/like', post: @post)}")
    / 基本はcreate.js.slimと一緒
    / いいねを削除したらハートの色が消える。
```
いろいろと試した結果、以下のようにコメントアウトのインデントをなくすことで非同期処理が行えるようになりました。
```slim
| $('#like_area-#{@post.id}').html("#{j render('posts/like', post: @post)}")
/ 基本はcreate.js.slimと一緒
/ いいねを削除したらハートの色が消える。
```
なぜコメントアウトにインデントを付けるだけでコードが動かなくなってしまったのか気になったので質問させて頂きたいです。

・ページネーションで生成されるURLについて
http://localhost:3000/?page=2





パラメータはURLで渡す。 例：http://localhost:3000/?page=2 のpage=2

1ページあたりの件数は.per(件数)をpageメソッドの後に付けることで指定できる他、
設定ファイル(config/initializers/kaminari_config.rb)を作成してデフォルトの件数を変更することもできる