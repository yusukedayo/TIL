require 'byebug'
#デバック機能でどの部分で問題が起きているかの確認を行えるようにしている。

class Janken
  SELECTABLE_GAME_COUNT = [1, 3, 5]
  attr_accessor :game_count
  attr_accessor :player
  attr_accessor :cpu
  attr_accessor :matches
# atter_accessorによってclassの外からインスタンス変数の変更や参照を可能にしている。
https://pikawaka.com/ruby/attr_accessor
  def initialize(player, cpu = Cpu.new)
    @player = player
    @cpu = cpu
    @matches = []
  end

  def start
    show_game_count_selection
    1.upto(@game_count) do |count|
      battle(count)
    end
    show_result
  end

  private

  def show_game_count_selection
    puts "何本勝負？(press #{SELECTABLE_GAME_COUNT.join(' or ')})"
    game_count = gets.to_i
    if SELECTABLE_GAME_COUNT.include?(game_count)
      @game_count = game_count
      puts "#{@game_count}本勝負を選びました。"
    else
      puts "#{SELECTABLE_GAME_COUNT.join(' か ')}で入力してください"
      show_game_count_selection
    end
  end

  def battle(count)
    puts "#{count}本目"
    match = Match.new(count, @player, @cpu)
    self.matches << match
    match.battle
    puts "#{winned_count}勝#{lose_count}敗"
  end

  def show_result
    puts '結果'
    puts "#{winned_count}勝#{lose_count}敗であなたの#{winned_count > lose_count ? '勝ち' : '負け'}"
  end

  def winned_count
    self.matches.filter { |match| match.winned }.count
  end

  def lose_count
    self.matches.reject { |match| match.winned }.count
  end
end

class Match
  attr_accessor :count
  attr_accessor :player
  attr_accessor :player_hand
  attr_accessor :cpu
  attr_accessor :cpu_hand
  attr_accessor :winned

  def initialize(count, player, cpu)
    @count = count
    @player = player 
    @cpu = cpu
  end

  def battle
    @player_hand = @player.create_hand
    @cpu_hand = @cpu.create_hand

    puts "CPU...#{@cpu_hand.name}"
    puts "あなた...#{@player_hand.name}"
    if @player.draw?(@cpu)
      puts 'あいこで...'
      battle
    elsif @player.win?(@cpu)
      puts '勝ち!'
      @winned = true 
    elsif @player.lose?(@cpu)
      puts '負け!'
      @winned = false
    end
  end
end

class Player
  attr_accessor :matches
  attr_accessor :hand

  def create_hand
    puts 'じゃんけん…(press g or c or p)'
    type = gets.chomp.to_sym
    if Hand::NAME_MAPPING.keys.include?(type) 
      @hand = Hand.new(type)
      @hand
    else
      puts 'g or c or p で入力して'
      create_hand
    end
  end

  def draw?(cpu)
    @hand.draw?(cpu.hand)
  end

  def win?(cpu)
    @hand.win?(cpu.hand)
  end

  def lose?(cpu)
    @hand.lose?(cpu.hand)
  end
end

class Cpu
  attr_accessor :hand

  def create_hand
    @hand = Hand.new(Hand::NAME_MAPPING.keys.sample.to_sym)
    @hand
  end
end

class Hand
  NAME_MAPPING = {
    g: 'グー',
    c: 'チョキ',
    p: 'パー'
  }
  WIN_LOSE_MAPPING = {
    g: :c,
    c: :p,
    p: :g
  }
  attr_accessor :type

  def initialize(type)
    @type = type
  end

  def name
    NAME_MAPPING[@type]
  end

  def draw?(hand)
    @type == hand.type
  end

  def win?(hand)
    WIN_LOSE_MAPPING[@type] == hand.type
  end

  def lose?(hand)
    WIN_LOSE_MAPPING.invert[@type] == hand.type
  end
end


janken = Janken.new(Player.new)
janken.start